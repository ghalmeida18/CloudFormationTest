Resources:
  #NoSQL DynamoDB criation. Properties: ID and Note.
  temperatureTable: 
    Type: AWS::DynamoDB::Table
    Properties:
     AttributeDefinitions:
       - AttributeName: id
         AttributeType: S
       - AttributeName: sender_id
         AttributeType: S
       - AttributeName: temperature
         AttributeType: S
     KeySchema:
       - AttributeName: id
         KeyType: HASH
       - AttributeName: sender_id
         KeyType: RANGE
     ProvisionedThroughput:
       ReadCapacityUnits: "1"
       WriteCapacityUnits: "1"
     TableName: "Temperatures"
     GlobalSecondaryIndexes:
       - IndexName: myGSI
         KeySchema:
           - AttributeName: temperature
             KeyType: HASH
         Projection:
           ProjectionType: KEYS_ONLY
         ProvisionedThroughput:
           ReadCapacityUnits: "1"
           WriteCapacityUnits: "1"
  #Define DLQ
  SNSDLQ:
     Type: AWS::SQS::Queue
     Properties:
       QueueName: 'MyDeadLetterQueue'
  #Lambda Creation
  LambdaTemperatureProcessing:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaTemperatureProcessing
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      DeadLetterConfig:
        TargetArn: !GetAtt SNSDLQ.Arn
      Code:
        ZipFile: |
            import json
            import boto3
            client = boto3.client('dynamodb')

            def handler(event, context):
                message = json.loads(event['Records'][0]['Sns']['Message'])
                PutItem = client.put_item(
                TableName='Temperatures',
                Item={
                        "id": { "S": message["id"] },
                        "sender_id": { "S": message["sender_id"] },
                        "Temperature": { "S": message["temperature"] }
                }
            )

  
  #Lambda Execution and permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt temperatureTable.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt SNSDLQ.Arn
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: 'arn:aws:logs:*:*:*'
  #Topic definition
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'example-sns-topic'
      TopicName: !Sub 'example-sns-topic'
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LambdaTemperatureProcessing.Arn
  #Invoke permission        
  functionExecutionRole: 
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaTemperatureProcessing
      Principal: sns.amazonaws.com
  #Topic policy      
  topicPolicy:      
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref Topic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sns:Publish'
            Resource: !Ref Topic
            Principal:
              AWS: '*'        
    
            